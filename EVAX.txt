
pragma solidity ^0.8.0;

contract Token {
    mapping(address => uint256) public balances;
    address public owner;
    uint256 public totalSupply;

    event Transfer(address indexed from, address indexed to, uint256 value);

    constructor(uint256 _initialSupply) {
        owner = msg.sender;
        totalSupply = _initialSupply;
        balances[msg.sender] = _initialSupply;
    }

   
    modifier hasSufficientBalance(uint256 _amount) {
        require(balances[msg.sender] >= _amount, "Balance is quite low");
        _;
    }

   
    modifier nonZeroTransfer(uint256 _amount) {
        require(_amount > 0, "Transfer amount must be greater than zero");
        _;
    }

    
    function transfer(address _to, uint256 _amount)
        public
        hasSufficientBalance(_amount)
        nonZeroTransfer(_amount)
    {
        balances[msg.sender] -= _amount;
        balances[_to] += _amount;
        emit Transfer(msg.sender, _to, _amount);
    }

    
    function destroy() public {
        require(msg.sender == owner, "Only the owner can destroy the contract");
        selfdestruct(payable(owner));
    }

   
    function alwaysFails() public pure {
        assert(false);
    }

   
    function alwaysFailsWithRevert() public pure {
        revert("This function always reverts");
    }
}